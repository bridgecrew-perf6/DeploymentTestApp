trigger:
  batch: true
  branches:
    include:
    - main

pool:
  name: DemoPool
  vmImage: 'windows-2022'

variables:
  # runEndToEnd: ${{ne(variables['Build.Reason'], 'PullRequest')}}
  runEndToEnd: ${{ne(variables['Build.Reason'], 'BatchedCI')}}

# ---------------------------------

stages:
- stage: BuildStage
  displayName:  🏗 Build Stage
  dependsOn: []

  jobs:
  # this will create an error
  - job: HelloWorld
    displayName: Hello World
    steps:
    - script: |
        echo "Build reason: ${{variables['Build.Reason']}}"
        echo "Run e2e tests? ${{variables['runEndToEnd']}}"

# ---------------------------------

- stage: IntegrationTestsStage
  displayName: 🧪 Run integration tests
  dependsOn: [ 'BuildStage' ]
  condition: succeeded('BuildStage')

  jobs:
  - job: FeedbackIntegrationTests
    displayName: Feedback Integration Tests
    steps:
    - task: PowerShell@2
      displayName: Feedback
      inputs:
        targetType: inline
        script: Write-Host 'Hello, World from Integration Tests stage!'

#---------------------------------

- stage: EndToEndTestsStage
  displayName: 🤖 Run End to End tests
  dependsOn: [ 'BuildStage' ]
  condition: |
    and(
      eq(variables.runEndToEnd, 'true'), 
      succeeded('BuildStage')
      )
    
  jobs:
  - job: FeedbackEndToEndTests
    steps:
    - task: PowerShell@2
      displayName: Feedback
      inputs:
        targetType: inline
        script: Write-Host 'Hello, World from end 2 end stage!'         
        
# ---------------------------------

- stage: ResultStage
  displayName: 🚀 Build Results
  dependsOn: [ 'IntegrationTestsStage', 'EndToEndTestsStage' ]
  condition: succeededOrFailed()
  jobs:
  - job: ResultJobFailed
    
    displayName: 💥 Failed
    condition: |
      or( 
        ne(stageDependencies.IntegrationTestsStage.FeedbackIntegrationTests.result, 'Succeeded'),
        ne(stageDependencies.EndToEndTestsStage.FeedbackEndToEndTests.result, 'Succeeded')
      )
    steps:
    - checkout: none
    - script: echo "Build failed"
    - bash: exit 1

  - job: ResultJobSuccessful
    displayName: 🚀 Succesful
    condition: |
      ne(stageDependencies.ResultStage.ResultJobFailed.result, 'Skipped')
    steps:
      - checkout: none
      - script: echo "Build Successful"
      