trigger:
  batch: true
  branches:
    include:
    - main

pool:
  name: DemoPool
  vmImage: 'windows-2022'

variables:
  runEndToEnd: ${{ne(variables['Build.Reason'], 'PullRequest')}}

# ---------------------------------

stages:
- stage: PreBuildStage
  displayName: Pre Build Stage
  dependsOn: []

  jobs:
    - job: pre_build_job
      displayName: Pre build job
      steps:
        - checkout: none

# ---------------------------------    

- stage: BuildStage
  displayName:  üèó Build Stage
  dependsOn: []

  jobs:
  # this will create an error
  - job: HelloWorld
    displayName: Hello World
    steps:
    - bash: exit 1 
    - script: |
        echo "Build reason: ${{variables['Build.Reason']}}"
        echo "Run e2e tests? ${{variables['runEndToEnd']}}"

  # This job creates a work item, and only runs if the previous job failed
  - job: ErrorHandler
    dependsOn: HelloWorld
    condition: failed()
    steps: 
    - task: PowerShell@2
      displayName: Error Handler Feedback
      inputs:
        targetType: inline
        script: Write-Host 'Error on Hello world Job'
# ---------------------------------

- stage: IntegrationTestsStage
  displayName: üß™ Run integration tests
  dependsOn: [ 'BuildStage' ]
  condition: succeeded('BuildStage')

  jobs:
  - job: FeedbackIntegrationTests
    displayName: Feedback Integration Tests
    steps:
    - task: PowerShell@2
      displayName: Feedback
      inputs:
        targetType: inline
        script: Write-Host 'Hello, World from Integration Tests stage!'

# ---------------------------------

- stage: EndToEndTestsStage
  displayName: ü§ñ Run End to End tests
  dependsOn: [ 'BuildStage' ]
  condition: |
   and(
     eq(variables.runEndToEnd, 'true'), 
     succeeded('BuildStage')
     )
  
  jobs:
  - job: Feedback
    displayName: Feedback
    steps:
    - task: PowerShell@2
      displayName: Feedback
      inputs:
        targetType: inline
        script: Write-Host 'Hello, World from end 2 end stage!'

# ---------------------------------

- stage: ResultStage
  displayName: üöÄ Build Result
  dependsOn: [ 'IntegrationTestsStage', 'EndToEndTestsStage' ]
  condition: always()
  
  jobs:
  - job: ResultJob
    displayName: üöÄ Result 
    steps:
    - checkout: none
    - bash: |
        echo AGENT_JOBSTATUS = $AGENT_JOBSTATUS
        if [[ "$AGENT_JOBSTATUS" == "SucceededWithIssues" ]]; else echo "Succeded" then exit 1; fi
      displayName: Fail build if partially successful
      